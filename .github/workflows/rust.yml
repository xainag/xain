name: Rust-CI

on:
  push:
    paths:
      - 'rust/**'

jobs:
  lint:
    name: cargo-fmt
    timeout-minutes: 20
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install nightly toolchain
        id: rust-toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          components: rustfmt
          # we need to set the nightly toolchain as default so that `rust-toolchain.outputs.rustc`
          # prints the installed nightly version rather than the installed version of stable
          default: true

      - name: Cache cargo
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            ${{ github.workspace }}/rust/target
          key: ${{ runner.os }}-cargo-${{ steps.rust-toolchain.outputs.rustc }}-fmt-${{ hashFiles('**/Cargo.lock') }}

      - name: cargo fmt
        working-directory: ./rust
        run: cargo +nightly fmt --all -- --check

  check:
    name: cargo-check
    timeout-minutes: 20
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install stable toolchain
        id: rust-toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable

      - name: Cache cargo
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            ${{ github.workspace }}/rust/target
          key: ${{ runner.os }}-cargo-${{ steps.rust-toolchain.outputs.rustc }}-check-${{ hashFiles('**/Cargo.lock') }}

      - name: cargo check
        working-directory: ./rust
        env:
          RUSTFLAGS: "-D warnings"
        run: |
          cargo check --all-targets
          cargo check --all-targets --all-features

  clippy:
    name: cargo-clippy
    timeout-minutes: 20
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install stable toolchain
        id: rust-toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          components: clippy

      - name: Cache cargo
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            ${{ github.workspace }}/rust/target
          key: ${{ runner.os }}-cargo-${{ steps.rust-toolchain.outputs.rustc }}-clippy-${{ hashFiles('**/Cargo.lock') }}

      - name: cargo clippy
        working-directory: ./rust
        run: |
          cargo clippy --all-targets -- --deny warnings --deny clippy::cargo
          cargo clippy --all-targets --all-features -- --deny warnings --deny clippy::cargo

  test:
    name: cargo-test
    timeout-minutes: 20
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install stable toolchain
        id: rust-toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable

      - name: Cache cargo
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            ${{ github.workspace }}/rust/target
          key: ${{ runner.os }}-cargo-${{ steps.rust-toolchain.outputs.rustc }}-tests-${{ hashFiles('**/Cargo.lock') }}

      - name: Start docker-compose
        working-directory: ./docker
        run: docker-compose up -d influxdb minio redis

      - name: Run tests
        working-directory: ./rust
        env:
          RUSTFLAGS: "-D warnings"
        run: |
          cargo test --all-targets
          cargo test --all-targets --all-features

      - name: Stop docker-compose
        working-directory: ./docker
        run: docker-compose down

  bench:
    name: cargo-bench
    timeout-minutes: 20
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install stable toolchain
        id: rust-toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable

      - name: Cache cargo
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            ${{ github.workspace }}/rust/target
          key: ${{ runner.os }}-cargo-${{ steps.rust-toolchain.outputs.rustc }}-bench-${{ hashFiles('**/Cargo.lock') }}

      - name: Run Bench
        working-directory: ./rust/benches
        run: cargo bench

      - name: Upload bench artifacts
        uses: actions/upload-artifact@v2
        with:
          name: bench_${{ github.sha }}
          path: ${{ github.workspace }}/rust/benches/target/criterion

  docs:
    name: cargo-doc
    timeout-minutes: 20
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install stable toolchain
        id: rust-toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable

      - name: Cache cargo
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            ${{ github.workspace }}/rust/target
          key: ${{ runner.os }}-cargo-${{ steps.rust-toolchain.outputs.rustc }}-doc-${{ hashFiles('**/Cargo.lock') }}

      - name: Check the building of docs
        working-directory: ./rust
        run: cargo doc --all-features --no-deps --color always

  coverage:
    name: cargo-tarpaulin
    timeout-minutes: 20
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install stable toolchain
        id: rust-toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal

      - name: Cache cargo
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            ${{ github.workspace }}/rust/target
          key: ${{ runner.os }}-cargo-${{ steps.rust-toolchain.outputs.rustc }}-tarpaulin-${{ hashFiles('**/Cargo.lock') }}

      - name: Start docker-compose
        working-directory: ./docker
        run: docker-compose up -d influxdb minio redis

      - name: Run cargo-tarpaulin
        uses: actions-rs/tarpaulin@v0.1
        with:
          version: '0.16.0'
          args: '--manifest-path rust/Cargo.toml --all-features --force-clean --lib --ignore-tests'

      - name: Stop docker-compose
        working-directory: ./docker
        run: docker-compose down

      - name: Upload to codecov.io
        uses: codecov/codecov-action@v1.0.12
        with:
          token: ${{secrets.CODECOV_TOKEN}}

  readme:
    name: cargo-readme
    timeout-minutes: 20
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install stable toolchain
        id: rust-toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable

      - name: Install cargo readme
        uses: actions-rs/cargo@v1
        with:
          command: install
          args: cargo-readme

      - name: Cache cargo
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            ${{ github.workspace }}/rust/target
          key: ${{ runner.os }}-cargo-${{ steps.rust-toolchain.outputs.rustc }}-readme-${{ hashFiles('**/Cargo.lock') }}

      - name: Check that readme matches docs
        working-directory: ./
        run: |
          cargo readme --project-root rust/xaynet/ --template ../../README.tpl --output ../../CARGO_README.md
          git diff --exit-code --no-index README.md CARGO_README.md
