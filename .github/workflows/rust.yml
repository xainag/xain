name: Rust-CI

on:
  push:
    paths:
      - 'rust/**'
      - 'bindings/python/**'
      - '.github/workflows/rust.yml'

jobs:
  registry-cache:
    name: cargo-fetch
    timeout-minutes: 5
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
      cache-date: ${{ steps.get-date.outputs.date }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install stable toolchain
        id: rust-toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable

      # We want to create a new cache after a week. Otherwise, the cache will
      # take up too much space by caching old dependencies
      - name: Year + ISO week number
        id: get-date
        run: echo "::set-output name=date::$(/bin/date -u "+%Y-%V")"
        shell: bash

      - name: Cache key
        id: cache-key
        run: echo "::set-output name=key::$(echo ${{ runner.os }}-cargo-registry-${{ steps.get-date.outputs.date }}-${{ hashFiles('**/Cargo.lock') }})"
        shell: bash

      - name: Cache cargo registry
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ steps.cache-key.outputs.key }}
          restore-keys: ${{ runner.os }}-cargo-registry-${{ steps.get-date.outputs.date }}-

      - name: cargo fetch
        working-directory: ./rust
        run: cargo fetch

  format:
    name: cargo-fmt
    needs: registry-cache
    timeout-minutes: 10
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        cargo_manifest: [rust, bindings/python]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install nightly toolchain
        id: rust-toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          components: rustfmt
          default: true

      - name: Use cached cargo registry
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ needs.registry-cache.outputs.cache-key }}

      # cargo fmt does not create any artifacts, therefore we don't need to cache the target folder

      - name: cargo fmt
        working-directory: ${{ matrix.cargo_manifest }}
        run: cargo +nightly fmt --all -- --check

  check:
    name: cargo-check
    needs: registry-cache
    timeout-minutes: 20
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        cargo_manifest: [rust, bindings/python]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install stable toolchain
        id: rust-toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable

      - name: Use cached cargo registry
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ needs.registry-cache.outputs.cache-key }}

      - name: Cache build artifacts
        uses: actions/cache@v2
        with:
          path: ${{ matrix.cargo_manifest }}/target
          key: ${{ runner.os }}-cargo-${{ steps.rust-toolchain.outputs.rustc }}-check-${{ matrix.cargo_manifest }}-${{ needs.registry-cache.outputs.cache-date }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-${{ steps.rust-toolchain.outputs.rustc }}-${{ matrix.cargo_manifest }}-check-${{ needs.registry-cache.outputs.cache-date }}-

      - name: cargo check
        working-directory: ${{ matrix.cargo_manifest }}
        env:
          RUSTFLAGS: "-D warnings"
        run: |
          cargo check --all-targets
          cargo check --all-targets --all-features

  clippy:
    name: cargo-clippy
    needs: [registry-cache, check]
    timeout-minutes: 20
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install stable toolchain
        id: rust-toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          components: clippy

      - name: Use cached cargo registry
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ needs.registry-cache.outputs.cache-key }}

      - name: Cache build artifacts
        uses: actions/cache@v2
        with:
          path: ${{ github.workspace }}/rust/target
          key: ${{ runner.os }}-cargo-${{ steps.rust-toolchain.outputs.rustc }}-clippy-${{ needs.registry-cache.outputs.cache-date }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-${{ steps.rust-toolchain.outputs.rustc }}-clippy-${{ needs.registry-cache.outputs.cache-date }}-

      - name: cargo clippy
        working-directory: rust
        run: |
          cargo clippy --all-targets -- --deny warnings --deny clippy::cargo
          cargo clippy --all-targets --all-features -- --deny warnings --deny clippy::cargo

  test:
    name: cargo-test
    needs: [registry-cache, check]
    timeout-minutes: 20
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install stable toolchain
        id: rust-toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable

      - name: Use cached cargo registry
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ needs.registry-cache.outputs.cache-key }}

      - name: Cache build artifacts
        uses: actions/cache@v2
        with:
          path: ${{ github.workspace }}/rust/target
          key: ${{ runner.os }}-cargo-${{ steps.rust-toolchain.outputs.rustc }}-tests-${{ needs.registry-cache.outputs.cache-date }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-${{ steps.rust-toolchain.outputs.rustc }}-tests-${{ needs.registry-cache.outputs.cache-date }}-

      - name: Start docker-compose
        working-directory: ./docker
        run: docker-compose up -d influxdb minio redis

      - name: Run tests
        working-directory: ./rust
        env:
          RUSTFLAGS: "-D warnings"
        run: |
          cargo test --all-targets
          cargo test --all-targets --all-features

      - name: Stop docker-compose
        working-directory: ./docker
        run: docker-compose down

  bench:
    name: cargo-bench
    needs: [registry-cache, check]
    timeout-minutes: 20
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install stable toolchain
        id: rust-toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable

      - name: Use cached cargo registry
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ needs.registry-cache.outputs.cache-key }}

      - name: Cache build artifacts
        uses: actions/cache@v2
        with:
          path: ${{ github.workspace }}/rust/target
          key: ${{ runner.os }}-cargo-${{ steps.rust-toolchain.outputs.rustc }}-bench-${{ needs.registry-cache.outputs.cache-date }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-${{ steps.rust-toolchain.outputs.rustc }}-bench-${{ needs.registry-cache.outputs.cache-date }}-

      - name: Run Bench
        working-directory: ./rust/benches
        run: cargo bench

      - name: Upload bench artifacts
        uses: actions/upload-artifact@v2
        with:
          name: bench_${{ github.sha }}
          path: ${{ github.workspace }}/rust/benches/target/criterion

  docs:
    name: cargo-doc
    needs: [registry-cache, check]
    timeout-minutes: 20
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install stable toolchain
        id: rust-toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable

      - name: Use cached cargo registry
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ needs.registry-cache.outputs.cache-key }}

      - name: Cache build artifacts
        uses: actions/cache@v2
        with:
          path: ${{ github.workspace }}/rust/target
          key: ${{ runner.os }}-cargo-${{ steps.rust-toolchain.outputs.rustc }}-doc-${{ needs.registry-cache.outputs.cache-date }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-${{ steps.rust-toolchain.outputs.rustc }}-doc-${{ needs.registry-cache.outputs.cache-date }}-

      - name: Check the building of docs
        working-directory: ./rust
        run: cargo doc --all-features --document-private-items --no-deps --color always

  coverage:
    name: cargo-tarpaulin
    needs: [registry-cache, check]
    timeout-minutes: 20
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install stable toolchain
        id: rust-toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal

      - name: Use cached cargo registry
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ needs.registry-cache.outputs.cache-key }}

      - name: Cache build artifacts
        uses: actions/cache@v2
        with:
          path: ${{ github.workspace }}/rust/target
          key: ${{ runner.os }}-cargo-${{ steps.rust-toolchain.outputs.rustc }}-tarpaulin-${{ needs.registry-cache.outputs.cache-date }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-${{ steps.rust-toolchain.outputs.rustc }}-tarpaulin-${{ needs.registry-cache.outputs.cache-date }}-

      - name: Start docker-compose
        working-directory: ./docker
        run: docker-compose up -d influxdb minio redis

      - name: Run cargo-tarpaulin
        uses: actions-rs/tarpaulin@v0.1
        with:
          version: '0.16.0'
          args: '--manifest-path rust/Cargo.toml --all-features --force-clean --lib --ignore-tests'

      - name: Stop docker-compose
        working-directory: ./docker
        run: docker-compose down

      - name: Upload to codecov.io
        uses: codecov/codecov-action@v1.2.1
        with:
          token: ${{secrets.CODECOV_TOKEN}}

  python_sdk:
    name: python sdk
    needs: [registry-cache, format, check]
    timeout-minutes: 20
    runs-on: ubuntu-latest
    env:
        working-directory: ./bindings/python
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install Rust
        id: rust-toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable

      - name: Cache cargo registry
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ needs.registry-cache.outputs.cache-key }}

      - name: Cache cargo target
        uses: actions/cache@v2
        with:
          path: ${{ env.working-directory }}/target
          key: ${{ runner.os }}-cargo-${{ steps.rust-toolchain.outputs.rustc }}-python-bindings-${{ needs.registry-cache.outputs.cache-date }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-${{ steps.rust-toolchain.outputs.rustc }}-python-bindings-${{ needs.registry-cache.outputs.cache-date }}-

      - name: Setup Python 3.6
        uses: actions/setup-python@v2
        with:
          python-version: 3.6
          architecture: "x64"

      - name: Get pip cache dir
        id: pip-cache
        run: echo "::set-output name=dir::$(pip cache dir)"

      - name: Cache pip packages
        uses: actions/cache@v2
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip-${{ hashFiles('./bindings/python/setup.py') }}

      - name: Install dependencies and build sdk
        run: |
          pip install --upgrade pip
          pip install --upgrade setuptools
          pip install maturin==0.8.3 black==20.8b1 isort==5.7.0
          maturin build
        working-directory: ${{ env.working-directory }}

      - name: black
        working-directory: ${{ env.working-directory }}
        run: black --check .

      - name: isort
        working-directory: ${{ env.working-directory }}
        run: isort --check-only --diff .

  readme:
    name: cargo-readme
    timeout-minutes: 20
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install stable toolchain
        id: rust-toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable

      - name: Cache cargo readme
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            ~/.cargo/bin/cargo-readme
          key: ${{ runner.os }}-cargo-readme-bin

      - name: Install cargo readme
        run: cargo install cargo-readme || true

      - name: Check that readme matches docs
        working-directory: ./
        run: |
          cargo readme --project-root rust/xaynet/ --template ../../README.tpl --output ../../CARGO_README.md
          git diff --exit-code --no-index README.md CARGO_README.md
