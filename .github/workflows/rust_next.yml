name: Rust-CI Next

on:
  push:

jobs:
  registry-cache:
    name: cargo-fetch
    timeout-minutes: 5
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
      cache-date: ${{ steps.get-date.outputs.date }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install stable toolchain
        id: rust-toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          default: true

      # We want to create a new cache after a week. Otherwise, the cache will
      # take up too much space by caching old dependencies
      - name: Year + ISO week number
        id: get-date
        run: echo "::set-output name=date::$(/bin/date -u "+%Y-%V")"
        shell: bash

      # We can use the registry cache of the normal rust ci
      - name: Cache key
        id: cache-key
        run: echo "::set-output name=key::$(echo ${{ runner.os }}-cargo-registry-${{ steps.get-date.outputs.date }}-${{ hashFiles('**/Cargo.lock') }})"
        shell: bash

      - name: Cache cargo registry
        uses: actions/cache@v2.1.4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ steps.cache-key.outputs.key }}
          restore-keys: ${{ runner.os }}-cargo-registry-${{ steps.get-date.outputs.date }}-

      - name: cargo fetch
        working-directory: ./rust
        run: cargo fetch

  format:
    name: cargo-fmt
    needs: registry-cache
    timeout-minutes: 10
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        cargo_manifest: [rust, bindings/python]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install nightly toolchain
        id: rust-toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          components: rustfmt
          default: true

      - name: Use cached cargo registry
        uses: actions/cache@v2.1.4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ needs.registry-cache.outputs.cache-key }}

      # cargo fmt does not create any artifacts, therefore we don't need to cache the target folder

      - name: cargo fmt
        working-directory: ${{ matrix.cargo_manifest }}
        run: cargo fmt --all -- --check

  check:
    name: cargo-check
    needs: registry-cache
    timeout-minutes: 20
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        rust_version: [stable, beta]
        cargo_manifest: [rust, bindings/python]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install toolchain
        id: rust-toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust_version }}
          default: true

      - name: Use cached cargo registry
        uses: actions/cache@v2.1.4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ needs.registry-cache.outputs.cache-key }}

      - name: Cache build artifacts
        uses: actions/cache@v2.1.4
        with:
          path: ${{ matrix.cargo_manifest }}/target
          key: ${{ runner.os }}-cargo-${{ steps.rust-toolchain.outputs.rustc }}-check-${{ matrix.cargo_manifest }}-${{ needs.registry-cache.outputs.cache-date }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-${{ steps.rust-toolchain.outputs.rustc }}-${{ matrix.cargo_manifest }}-check-${{ needs.registry-cache.outputs.cache-date }}-

      - name: cargo check
        working-directory: ${{ matrix.cargo_manifest }}
        env:
          RUSTFLAGS: "-D warnings"
        run: |
          cargo check --all-targets
          cargo check --all-targets --all-features

  clippy:
    name: cargo-clippy
    needs: [registry-cache, check]
    timeout-minutes: 20
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        rust_version: [stable, beta]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install toolchain
        id: rust-toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust_version }}
          default: true
          components: clippy

      - name: Use cached cargo registry
        uses: actions/cache@v2.1.4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ needs.registry-cache.outputs.cache-key }}

      - name: Cache build artifacts
        uses: actions/cache@v2.1.4
        with:
          path: ${{ github.workspace }}/rust/target
          key: ${{ runner.os }}-cargo-${{ steps.rust-toolchain.outputs.rustc }}-clippy-${{ needs.registry-cache.outputs.cache-date }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-${{ steps.rust-toolchain.outputs.rustc }}-clippy-${{ needs.registry-cache.outputs.cache-date }}-

      - name: cargo clippy
        working-directory: rust
        run: |
          cargo clippy --all-targets -- --deny warnings --deny clippy::cargo
          cargo clippy --all-targets --all-features -- --deny warnings --deny clippy::cargo

  docs:
    name: cargo-doc
    needs: [registry-cache, check]
    timeout-minutes: 20
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust_version: [stable, beta]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install toolchain
        id: rust-toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust_version }}
          default: true

      - name: Use cached cargo registry
        uses: actions/cache@v2.1.4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ needs.registry-cache.outputs.cache-key }}

      - name: Cache build artifacts
        uses: actions/cache@v2.1.4
        with:
          path: ${{ github.workspace }}/rust/target
          key: ${{ runner.os }}-cargo-${{ steps.rust-toolchain.outputs.rustc }}-doc-${{ needs.registry-cache.outputs.cache-date }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-${{ steps.rust-toolchain.outputs.rustc }}-doc-${{ needs.registry-cache.outputs.cache-date }}-

      - name: Check the building of docs
        working-directory: ./rust
        run: cargo doc --all-features --document-private-items --no-deps --color always

  notify:
    name: notify
    if: failure()
    needs: [format, check, clippy, docs]
    timeout-minutes: 20
    runs-on: ubuntu-latest
    steps:
      - name: Notify
        run: echo "Sending notification"
